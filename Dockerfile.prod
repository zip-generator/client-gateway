# Fase de dependencias
FROM node:21-alpine3.19 AS deps

# Instala pnpm globalmente usando npm
RUN npm install -g pnpm

# Establece el directorio de trabajo
WORKDIR /usr/src/app

# Copia el archivo de bloqueo y el package.json para aprovechar la caché de Docker
COPY --chown=node:node pnpm-lock.yaml ./
COPY --chown=node:node package.json ./

# Instala todas las dependencias (incluyendo devDependencies)
RUN pnpm install --frozen-lockfile

# Fase de construcción
FROM node:21-alpine3.19 AS build

# Instala pnpm globalmente usando npm
RUN npm install -g pnpm

WORKDIR /usr/src/app

# Copia los archivos de la fase de dependencias
COPY --chown=node:node --from=deps /usr/src/app/node_modules ./node_modules
COPY --chown=node:node --from=deps /usr/src/app/package.json ./package.json
COPY --chown=node:node --from=deps /usr/src/app/pnpm-lock.yaml ./pnpm-lock.yaml
COPY . .

# Construye la aplicación
RUN pnpm build

# Elimina dependencias de desarrollo
RUN pnpm prune --prod

USER node

# Imagen de producción
FROM node:21-alpine3.19 AS prod


WORKDIR /usr/src/app

# Copia las dependencias y el build de la fase de construcción
COPY --from=build /usr/src/app/node_modules ./node_modules
COPY --from=build /usr/src/app/dist ./dist

ENV NODE_ENV=production

 

EXPOSE 3000

CMD ["node", "dist/main.js"]
